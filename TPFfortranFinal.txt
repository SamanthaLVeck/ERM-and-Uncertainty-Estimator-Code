!---------------------------------------------------------------------!
!                        Subroutine SDVINI
!      
!     Author: Samantha Veck
!      
!     Date: 24 November 2021
!
!---------------------------------------------------------------------!
!
!     Notes:
!
!     Subroutine SDVINI to determine the initial values for solution
!     dependent state variables (statev(*)) where 1=x, 2=y, 3=z.
!     Stores the coordinates of the nodes so they can 
!     be used with UEXPAN.
!
!---------------------------------------------------------------------!
      subroutine sdvini(statev,coords,nstatv,ncrds,noel,npt,layer,kspt)

      include 'aba_param.inc'

      dimension statev(nstatv),coords(ncrds)

      statev(1) = coords(1)
      statev(2) = coords(2)
      statev(3) = coords(3)

      return
      end

!---------------------------------------------------------------------!
!                        Subroutine UEXPAN
!      
!     Author: Samantha Veck
!      
!     Date: 11 January 2022
!
!---------------------------------------------------------------------!
!
!     Notes:
!     
!     This subroutine generates an eigenstrain field in one direction
!     using thermal expansion coefficients.
!      
!     The eigenstrain field is given by a triangular pulse function. 
!     
!     This file produces the final residual stress field based on 
!     calculated coefficients from previous steps. 
!
!     UPDATE FOR EACH ITERATION: 
!      - A(1:*), B(1:*), C(1:*), CK(1:*) where * = number of basis 
!        functions
!
!---------------------------------------------------------------------!
      subroutine uexpan(expan,dexpandt,temp,time,dtime,predef,dpred,
     $     statev,cmname,nstatv,noel)

      include 'aba_param.inc'
      
      character*80 cmname

      dimension expan(*),dexpandt(*),temp(2),time(2),predef(*),
     $     dpred(*),statev(nstatv), A(1:20), B(1:20), C(1:20),  
     $     CK(1:20), A1(1:20), B1(1:20), C1(1:20)
      
      do I = 1,3
          dexpandt(I) = 0
      end do

!---------------------------------------------------------------------!
!
!     Notes:
!     
!     Definition of expansion coefficients and triangular pulse
!     function code. 
!
!     UPDATE FOR EACH ITERATION: 
!      - expan(*) 1,2,3 based on component required (this also needs
!        to be edited on the TPFfortranFInalAppend.txt file)
!      - do I = 1,* where * = number of basis functions
!      - statev(*) 1,2,3 based on coord being used (this is on the 
!        TPFfortranFinalAppend.txt file)  
!
!     A(*) = rising edge position for base function *
!     B(*) = function peak position for base function *
!     C(*) = falling edge position for base function *
!     CK(*) = coefficient value for base function *
!    
!---------------------------------------------------------------------!
      
       expan(2) = 0.0D0
       expan(3) = 0.0D0
	 
      do I = 1,20

